/*
 * MDES Digital Enablement API
 *
 * These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// TokenDetailGetTokenOnly
    /// </summary>
    [DataContract(Name = "tokenDetail_getToken_Only")]
    public partial class TokenDetailGetTokenOnly : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenDetailGetTokenOnly" /> class.
        /// </summary>
        /// <param name="tokenUniqueReference">Globally unique identifier for the Token, as assigned by MDES. .</param>
        /// <param name="publicKeyFingerprint">The certificate fingerprint identifying the public key used to encrypt the ephemeral AES key. .</param>
        /// <param name="encryptedKey">One-time use AES key encrypted by the MasterCard public key (as identified by &#39;publicKeyFingerprint&#39;) using the OAEP or RSA Encryption Standard PKCS #1 v1.5 scheme (depending on the value of &#39;oaepHashingAlgorithm&#39;. Requirement is for a 128-bit key (with 256-bit key supported as an option). .</param>
        /// <param name="oaepHashingAlgorithm">Hashing algorithm used with the OAEP scheme. If omitted, then the RSA Encryption Standard PKCS #1 v1.5 will be used. Must be either &#39;SHA256&#39; (Use the SHA-256 algorithm) or &#39;SHA512&#39; (Use the SHA-512 algorithm). .</param>
        /// <param name="iv">It is recommended to supply a random initialization vector when encrypting the data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. Hex-encoded data (case-insensitive). .</param>
        /// <param name="encryptedData">encryptedData.</param>
        public TokenDetailGetTokenOnly(string tokenUniqueReference = default(string), string publicKeyFingerprint = default(string), string encryptedKey = default(string), string oaepHashingAlgorithm = default(string), string iv = default(string), TokenDetailDataGetTokenOnly encryptedData = default(TokenDetailDataGetTokenOnly))
        {
            this.TokenUniqueReference = tokenUniqueReference;
            this.PublicKeyFingerprint = publicKeyFingerprint;
            this.EncryptedKey = encryptedKey;
            this.OaepHashingAlgorithm = oaepHashingAlgorithm;
            this.Iv = iv;
            this.EncryptedData = encryptedData;
        }

        /// <summary>
        /// Globally unique identifier for the Token, as assigned by MDES. 
        /// </summary>
        /// <value>Globally unique identifier for the Token, as assigned by MDES. </value>
        /// <example>DWSPMC000000000132d72d4fcb2f4136a0532d3093ff1a45</example>
        [DataMember(Name = "tokenUniqueReference", EmitDefaultValue = false)]
        public string TokenUniqueReference { get; set; }

        /// <summary>
        /// The certificate fingerprint identifying the public key used to encrypt the ephemeral AES key. 
        /// </summary>
        /// <value>The certificate fingerprint identifying the public key used to encrypt the ephemeral AES key. </value>
        /// <example>4c4ead5927f0df8117f178eea9308daa58e27c2b</example>
        [DataMember(Name = "publicKeyFingerprint", EmitDefaultValue = false)]
        public string PublicKeyFingerprint { get; set; }

        /// <summary>
        /// One-time use AES key encrypted by the MasterCard public key (as identified by &#39;publicKeyFingerprint&#39;) using the OAEP or RSA Encryption Standard PKCS #1 v1.5 scheme (depending on the value of &#39;oaepHashingAlgorithm&#39;. Requirement is for a 128-bit key (with 256-bit key supported as an option). 
        /// </summary>
        /// <value>One-time use AES key encrypted by the MasterCard public key (as identified by &#39;publicKeyFingerprint&#39;) using the OAEP or RSA Encryption Standard PKCS #1 v1.5 scheme (depending on the value of &#39;oaepHashingAlgorithm&#39;. Requirement is for a 128-bit key (with 256-bit key supported as an option). </value>
        /// <example>A1B2C3D4E5F6112233445566</example>
        [DataMember(Name = "encryptedKey", EmitDefaultValue = false)]
        public string EncryptedKey { get; set; }

        /// <summary>
        /// Hashing algorithm used with the OAEP scheme. If omitted, then the RSA Encryption Standard PKCS #1 v1.5 will be used. Must be either &#39;SHA256&#39; (Use the SHA-256 algorithm) or &#39;SHA512&#39; (Use the SHA-512 algorithm). 
        /// </summary>
        /// <value>Hashing algorithm used with the OAEP scheme. If omitted, then the RSA Encryption Standard PKCS #1 v1.5 will be used. Must be either &#39;SHA256&#39; (Use the SHA-256 algorithm) or &#39;SHA512&#39; (Use the SHA-512 algorithm). </value>
        /// <example>SHA512</example>
        [DataMember(Name = "oaepHashingAlgorithm", EmitDefaultValue = false)]
        public string OaepHashingAlgorithm { get; set; }

        /// <summary>
        /// It is recommended to supply a random initialization vector when encrypting the data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. Hex-encoded data (case-insensitive). 
        /// </summary>
        /// <value>It is recommended to supply a random initialization vector when encrypting the data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. Hex-encoded data (case-insensitive). </value>
        /// <example>NA</example>
        [DataMember(Name = "iv", EmitDefaultValue = false)]
        public string Iv { get; set; }

        /// <summary>
        /// Gets or Sets EncryptedData
        /// </summary>
        [DataMember(Name = "encryptedData", EmitDefaultValue = false)]
        public TokenDetailDataGetTokenOnly EncryptedData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenDetailGetTokenOnly {\n");
            sb.Append("  TokenUniqueReference: ").Append(TokenUniqueReference).Append("\n");
            sb.Append("  PublicKeyFingerprint: ").Append(PublicKeyFingerprint).Append("\n");
            sb.Append("  EncryptedKey: ").Append(EncryptedKey).Append("\n");
            sb.Append("  OaepHashingAlgorithm: ").Append(OaepHashingAlgorithm).Append("\n");
            sb.Append("  Iv: ").Append(Iv).Append("\n");
            sb.Append("  EncryptedData: ").Append(EncryptedData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TokenUniqueReference (string) maxLength
            if (this.TokenUniqueReference != null && this.TokenUniqueReference.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenUniqueReference, length must be less than 64.", new [] { "TokenUniqueReference" });
            }

            // PublicKeyFingerprint (string) maxLength
            if (this.PublicKeyFingerprint != null && this.PublicKeyFingerprint.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PublicKeyFingerprint, length must be less than 64.", new [] { "PublicKeyFingerprint" });
            }

            // EncryptedKey (string) maxLength
            if (this.EncryptedKey != null && this.EncryptedKey.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EncryptedKey, length must be less than 512.", new [] { "EncryptedKey" });
            }

            // OaepHashingAlgorithm (string) maxLength
            if (this.OaepHashingAlgorithm != null && this.OaepHashingAlgorithm.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OaepHashingAlgorithm, length must be less than 6.", new [] { "OaepHashingAlgorithm" });
            }

            // Iv (string) maxLength
            if (this.Iv != null && this.Iv.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Iv, length must be less than 32.", new [] { "Iv" });
            }

            yield break;
        }
    }

}
