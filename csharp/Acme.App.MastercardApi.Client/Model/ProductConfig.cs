/*
 * MDES Digital Enablement API
 *
 * These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// ProductConfig
    /// </summary>
    [DataContract(Name = "productConfig")]
    public partial class ProductConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductConfig" /> class.
        /// </summary>
        /// <param name="brandLogoAssetId">The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object .</param>
        /// <param name="issuerLogoAssetId">The logo of the issuing bank. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object .</param>
        /// <param name="isCoBranded">Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object .</param>
        /// <param name="coBrandName">Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise. **Conditional: Conditionally required if isCoBranded &#x3D; \&quot;true\&quot;. Not present otherwise** .</param>
        /// <param name="coBrandLogoAssetId">The co-brand logo (if any) for this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. .</param>
        /// <param name="cardBackgroundCombinedAssetId">The card image used to represent the digital card in the wallet. This ?combined? option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided** .</param>
        /// <param name="cardBackgroundAssetId">The card image used to represent the digital card in the wallet. This ?non-combined? option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided** .</param>
        /// <param name="iconAssetId">The icon representing the primary brand(s) associated with this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object .</param>
        /// <param name="foregroundColor">Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object .</param>
        /// <param name="issuerName">Name of the issuing bank. Always returned in Product Configuration object .</param>
        /// <param name="shortDescription">A short description for this product. Always returned in Product Configuration object .</param>
        /// <param name="longDescription">A long description for this product. .</param>
        /// <param name="customerServiceUrl">Customer service website of the issuing bank. .</param>
        /// <param name="customerServiceEmail">Customer service email address of the issuing bank. .</param>
        /// <param name="customerServicePhoneNumber">Customer service phone number of the issuing bank. .</param>
        /// <param name="issuerMobileApp">Contains one or more mobile app details that may be used to deep link from the Mobile Payment App to the issuer mobile app. .</param>
        /// <param name="onlineBankingLoginUrl">Logon URL for the issuing bank?s online banking website. .</param>
        /// <param name="termsAndConditionsUrl">URL linking to the issuing bank?s terms and conditions for this product. .</param>
        /// <param name="privacyPolicyUrl">URL linking to the issuing bank?s privacy policy for this product. .</param>
        /// <param name="issuerProductConfigCode">Freeform identifier for this product configuration as assigned by the issuer. .</param>
        public ProductConfig(string brandLogoAssetId = default(string), string issuerLogoAssetId = default(string), bool isCoBranded = default(bool), string coBrandName = default(string), string coBrandLogoAssetId = default(string), string cardBackgroundCombinedAssetId = default(string), string cardBackgroundAssetId = default(string), string iconAssetId = default(string), string foregroundColor = default(string), string issuerName = default(string), string shortDescription = default(string), string longDescription = default(string), string customerServiceUrl = default(string), string customerServiceEmail = default(string), string customerServicePhoneNumber = default(string), Object issuerMobileApp = default(Object), string onlineBankingLoginUrl = default(string), string termsAndConditionsUrl = default(string), string privacyPolicyUrl = default(string), string issuerProductConfigCode = default(string))
        {
            this.BrandLogoAssetId = brandLogoAssetId;
            this.IssuerLogoAssetId = issuerLogoAssetId;
            this.IsCoBranded = isCoBranded;
            this.CoBrandName = coBrandName;
            this.CoBrandLogoAssetId = coBrandLogoAssetId;
            this.CardBackgroundCombinedAssetId = cardBackgroundCombinedAssetId;
            this.CardBackgroundAssetId = cardBackgroundAssetId;
            this.IconAssetId = iconAssetId;
            this.ForegroundColor = foregroundColor;
            this.IssuerName = issuerName;
            this.ShortDescription = shortDescription;
            this.LongDescription = longDescription;
            this.CustomerServiceUrl = customerServiceUrl;
            this.CustomerServiceEmail = customerServiceEmail;
            this.CustomerServicePhoneNumber = customerServicePhoneNumber;
            this.IssuerMobileApp = issuerMobileApp;
            this.OnlineBankingLoginUrl = onlineBankingLoginUrl;
            this.TermsAndConditionsUrl = termsAndConditionsUrl;
            this.PrivacyPolicyUrl = privacyPolicyUrl;
            this.IssuerProductConfigCode = issuerProductConfigCode;
        }

        /// <summary>
        /// The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object 
        /// </summary>
        /// <value>The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object </value>
        /// <example>800200c9-629d-11e3-949a-0739d27e5a66</example>
        [DataMember(Name = "brandLogoAssetId", EmitDefaultValue = false)]
        public string BrandLogoAssetId { get; set; }

        /// <summary>
        /// The logo of the issuing bank. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object 
        /// </summary>
        /// <value>The logo of the issuing bank. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object </value>
        /// <example>dbc55444-986a-4896-b41c-5d5e2dd431e2</example>
        [DataMember(Name = "issuerLogoAssetId", EmitDefaultValue = false)]
        public string IssuerLogoAssetId { get; set; }

        /// <summary>
        /// Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object 
        /// </summary>
        /// <value>Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object </value>
        /// <example>true</example>
        [DataMember(Name = "isCoBranded", EmitDefaultValue = true)]
        public bool IsCoBranded { get; set; }

        /// <summary>
        /// Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise. **Conditional: Conditionally required if isCoBranded &#x3D; \&quot;true\&quot;. Not present otherwise** 
        /// </summary>
        /// <value>Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise. **Conditional: Conditionally required if isCoBranded &#x3D; \&quot;true\&quot;. Not present otherwise** </value>
        /// <example>Co brand partner</example>
        [DataMember(Name = "coBrandName", EmitDefaultValue = false)]
        public string CoBrandName { get; set; }

        /// <summary>
        /// The co-brand logo (if any) for this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. 
        /// </summary>
        /// <value>The co-brand logo (if any) for this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. </value>
        /// <example>dbc55444-496a-4896-b41c-5d5e2dd431e2</example>
        [DataMember(Name = "coBrandLogoAssetId", EmitDefaultValue = false)]
        public string CoBrandLogoAssetId { get; set; }

        /// <summary>
        /// The card image used to represent the digital card in the wallet. This ?combined? option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided** 
        /// </summary>
        /// <value>The card image used to represent the digital card in the wallet. This ?combined? option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided** </value>
        /// <example>739d27e5-629d-11e3-949a-0800200c9a66</example>
        [DataMember(Name = "cardBackgroundCombinedAssetId", EmitDefaultValue = false)]
        public string CardBackgroundCombinedAssetId { get; set; }

        /// <summary>
        /// The card image used to represent the digital card in the wallet. This ?non-combined? option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided** 
        /// </summary>
        /// <value>The card image used to represent the digital card in the wallet. This ?non-combined? option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided** </value>
        /// <example>456d27e5-629d-11e3-949a-0800200c9a66</example>
        [DataMember(Name = "cardBackgroundAssetId", EmitDefaultValue = false)]
        public string CardBackgroundAssetId { get; set; }

        /// <summary>
        /// The icon representing the primary brand(s) associated with this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object 
        /// </summary>
        /// <value>The icon representing the primary brand(s) associated with this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object </value>
        /// <example>739d87e5-629d-11e3-949a-0800200c9a66</example>
        [DataMember(Name = "iconAssetId", EmitDefaultValue = false)]
        public string IconAssetId { get; set; }

        /// <summary>
        /// Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object 
        /// </summary>
        /// <value>Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object </value>
        /// <example>0</example>
        [DataMember(Name = "foregroundColor", EmitDefaultValue = false)]
        public string ForegroundColor { get; set; }

        /// <summary>
        /// Name of the issuing bank. Always returned in Product Configuration object 
        /// </summary>
        /// <value>Name of the issuing bank. Always returned in Product Configuration object </value>
        /// <example>Issuing Bank</example>
        [DataMember(Name = "issuerName", EmitDefaultValue = false)]
        public string IssuerName { get; set; }

        /// <summary>
        /// A short description for this product. Always returned in Product Configuration object 
        /// </summary>
        /// <value>A short description for this product. Always returned in Product Configuration object </value>
        /// <example>Bank Rewards MasterCard</example>
        [DataMember(Name = "shortDescription", EmitDefaultValue = false)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// A long description for this product. 
        /// </summary>
        /// <value>A long description for this product. </value>
        /// <example>Bank Rewards MasterCard with the super duper rewards program</example>
        [DataMember(Name = "longDescription", EmitDefaultValue = false)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Customer service website of the issuing bank. 
        /// </summary>
        /// <value>Customer service website of the issuing bank. </value>
        /// <example>https://bank.com/customerservice</example>
        [DataMember(Name = "customerServiceUrl", EmitDefaultValue = false)]
        public string CustomerServiceUrl { get; set; }

        /// <summary>
        /// Customer service email address of the issuing bank. 
        /// </summary>
        /// <value>Customer service email address of the issuing bank. </value>
        /// <example>customerservice@bank.com</example>
        [DataMember(Name = "customerServiceEmail", EmitDefaultValue = false)]
        public string CustomerServiceEmail { get; set; }

        /// <summary>
        /// Customer service phone number of the issuing bank. 
        /// </summary>
        /// <value>Customer service phone number of the issuing bank. </value>
        /// <example>1234567891</example>
        [DataMember(Name = "customerServicePhoneNumber", EmitDefaultValue = false)]
        public string CustomerServicePhoneNumber { get; set; }

        /// <summary>
        /// Contains one or more mobile app details that may be used to deep link from the Mobile Payment App to the issuer mobile app. 
        /// </summary>
        /// <value>Contains one or more mobile app details that may be used to deep link from the Mobile Payment App to the issuer mobile app. </value>
        [DataMember(Name = "issuerMobileApp", EmitDefaultValue = false)]
        public Object IssuerMobileApp { get; set; }

        /// <summary>
        /// Logon URL for the issuing bank?s online banking website. 
        /// </summary>
        /// <value>Logon URL for the issuing bank?s online banking website. </value>
        /// <example>bank.com</example>
        [DataMember(Name = "onlineBankingLoginUrl", EmitDefaultValue = false)]
        public string OnlineBankingLoginUrl { get; set; }

        /// <summary>
        /// URL linking to the issuing bank?s terms and conditions for this product. 
        /// </summary>
        /// <value>URL linking to the issuing bank?s terms and conditions for this product. </value>
        /// <example>https://bank.com/termsAndConditions</example>
        [DataMember(Name = "termsAndConditionsUrl", EmitDefaultValue = false)]
        public string TermsAndConditionsUrl { get; set; }

        /// <summary>
        /// URL linking to the issuing bank?s privacy policy for this product. 
        /// </summary>
        /// <value>URL linking to the issuing bank?s privacy policy for this product. </value>
        /// <example>https://bank.com/privacy</example>
        [DataMember(Name = "privacyPolicyUrl", EmitDefaultValue = false)]
        public string PrivacyPolicyUrl { get; set; }

        /// <summary>
        /// Freeform identifier for this product configuration as assigned by the issuer. 
        /// </summary>
        /// <value>Freeform identifier for this product configuration as assigned by the issuer. </value>
        /// <example>123456</example>
        [DataMember(Name = "issuerProductConfigCode", EmitDefaultValue = false)]
        public string IssuerProductConfigCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductConfig {\n");
            sb.Append("  BrandLogoAssetId: ").Append(BrandLogoAssetId).Append("\n");
            sb.Append("  IssuerLogoAssetId: ").Append(IssuerLogoAssetId).Append("\n");
            sb.Append("  IsCoBranded: ").Append(IsCoBranded).Append("\n");
            sb.Append("  CoBrandName: ").Append(CoBrandName).Append("\n");
            sb.Append("  CoBrandLogoAssetId: ").Append(CoBrandLogoAssetId).Append("\n");
            sb.Append("  CardBackgroundCombinedAssetId: ").Append(CardBackgroundCombinedAssetId).Append("\n");
            sb.Append("  CardBackgroundAssetId: ").Append(CardBackgroundAssetId).Append("\n");
            sb.Append("  IconAssetId: ").Append(IconAssetId).Append("\n");
            sb.Append("  ForegroundColor: ").Append(ForegroundColor).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("  CustomerServiceUrl: ").Append(CustomerServiceUrl).Append("\n");
            sb.Append("  CustomerServiceEmail: ").Append(CustomerServiceEmail).Append("\n");
            sb.Append("  CustomerServicePhoneNumber: ").Append(CustomerServicePhoneNumber).Append("\n");
            sb.Append("  IssuerMobileApp: ").Append(IssuerMobileApp).Append("\n");
            sb.Append("  OnlineBankingLoginUrl: ").Append(OnlineBankingLoginUrl).Append("\n");
            sb.Append("  TermsAndConditionsUrl: ").Append(TermsAndConditionsUrl).Append("\n");
            sb.Append("  PrivacyPolicyUrl: ").Append(PrivacyPolicyUrl).Append("\n");
            sb.Append("  IssuerProductConfigCode: ").Append(IssuerProductConfigCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BrandLogoAssetId (string) maxLength
            if (this.BrandLogoAssetId != null && this.BrandLogoAssetId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for BrandLogoAssetId, length must be less than 64.", new [] { "BrandLogoAssetId" });
            }

            // IssuerLogoAssetId (string) maxLength
            if (this.IssuerLogoAssetId != null && this.IssuerLogoAssetId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for IssuerLogoAssetId, length must be less than 64.", new [] { "IssuerLogoAssetId" });
            }

            // CoBrandName (string) maxLength
            if (this.CoBrandName != null && this.CoBrandName.Length > 128)
            {
                yield return new ValidationResult("Invalid value for CoBrandName, length must be less than 128.", new [] { "CoBrandName" });
            }

            // CoBrandLogoAssetId (string) maxLength
            if (this.CoBrandLogoAssetId != null && this.CoBrandLogoAssetId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for CoBrandLogoAssetId, length must be less than 64.", new [] { "CoBrandLogoAssetId" });
            }

            // CardBackgroundCombinedAssetId (string) maxLength
            if (this.CardBackgroundCombinedAssetId != null && this.CardBackgroundCombinedAssetId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for CardBackgroundCombinedAssetId, length must be less than 64.", new [] { "CardBackgroundCombinedAssetId" });
            }

            // CardBackgroundAssetId (string) maxLength
            if (this.CardBackgroundAssetId != null && this.CardBackgroundAssetId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for CardBackgroundAssetId, length must be less than 64.", new [] { "CardBackgroundAssetId" });
            }

            // IconAssetId (string) maxLength
            if (this.IconAssetId != null && this.IconAssetId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for IconAssetId, length must be less than 64.", new [] { "IconAssetId" });
            }

            // ForegroundColor (string) maxLength
            if (this.ForegroundColor != null && this.ForegroundColor.Length > 6)
            {
                yield return new ValidationResult("Invalid value for ForegroundColor, length must be less than 6.", new [] { "ForegroundColor" });
            }

            // IssuerName (string) maxLength
            if (this.IssuerName != null && this.IssuerName.Length > 64)
            {
                yield return new ValidationResult("Invalid value for IssuerName, length must be less than 64.", new [] { "IssuerName" });
            }

            // ShortDescription (string) maxLength
            if (this.ShortDescription != null && this.ShortDescription.Length > 128)
            {
                yield return new ValidationResult("Invalid value for ShortDescription, length must be less than 128.", new [] { "ShortDescription" });
            }

            // LongDescription (string) maxLength
            if (this.LongDescription != null && this.LongDescription.Length > 256)
            {
                yield return new ValidationResult("Invalid value for LongDescription, length must be less than 256.", new [] { "LongDescription" });
            }

            // CustomerServiceUrl (string) maxLength
            if (this.CustomerServiceUrl != null && this.CustomerServiceUrl.Length > 128)
            {
                yield return new ValidationResult("Invalid value for CustomerServiceUrl, length must be less than 128.", new [] { "CustomerServiceUrl" });
            }

            // CustomerServiceEmail (string) maxLength
            if (this.CustomerServiceEmail != null && this.CustomerServiceEmail.Length > 64)
            {
                yield return new ValidationResult("Invalid value for CustomerServiceEmail, length must be less than 64.", new [] { "CustomerServiceEmail" });
            }

            // CustomerServicePhoneNumber (string) maxLength
            if (this.CustomerServicePhoneNumber != null && this.CustomerServicePhoneNumber.Length > 64)
            {
                yield return new ValidationResult("Invalid value for CustomerServicePhoneNumber, length must be less than 64.", new [] { "CustomerServicePhoneNumber" });
            }

            // OnlineBankingLoginUrl (string) maxLength
            if (this.OnlineBankingLoginUrl != null && this.OnlineBankingLoginUrl.Length > 128)
            {
                yield return new ValidationResult("Invalid value for OnlineBankingLoginUrl, length must be less than 128.", new [] { "OnlineBankingLoginUrl" });
            }

            // TermsAndConditionsUrl (string) maxLength
            if (this.TermsAndConditionsUrl != null && this.TermsAndConditionsUrl.Length > 128)
            {
                yield return new ValidationResult("Invalid value for TermsAndConditionsUrl, length must be less than 128.", new [] { "TermsAndConditionsUrl" });
            }

            // PrivacyPolicyUrl (string) maxLength
            if (this.PrivacyPolicyUrl != null && this.PrivacyPolicyUrl.Length > 128)
            {
                yield return new ValidationResult("Invalid value for PrivacyPolicyUrl, length must be less than 128.", new [] { "PrivacyPolicyUrl" });
            }

            // IssuerProductConfigCode (string) maxLength
            if (this.IssuerProductConfigCode != null && this.IssuerProductConfigCode.Length > 128)
            {
                yield return new ValidationResult("Invalid value for IssuerProductConfigCode, length must be less than 128.", new [] { "IssuerProductConfigCode" });
            }

            yield break;
        }
    }

}
