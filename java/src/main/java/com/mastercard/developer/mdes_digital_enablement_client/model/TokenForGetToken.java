/*
 * MDES Digital Enablement API
 * These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mdes_digital_enablement_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mastercard.developer.mdes_digital_enablement_client.model.ProductConfig;
import com.mastercard.developer.mdes_digital_enablement_client.model.TokenInfoForNTUAndGetToken;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mastercard.developer.mdes_digital_enablement_client.JSON;

/**
 * TokenForGetToken
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-24T13:37:45.612619+01:00[Europe/Dublin]", comments = "Generator version: 7.5.0")
public class TokenForGetToken {
  public static final String SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE = "tokenUniqueReference";
  @SerializedName(SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE)
  private String tokenUniqueReference;

  public static final String SERIALIZED_NAME_TOKEN_REQUESTOR_ID = "tokenRequestorId";
  @SerializedName(SERIALIZED_NAME_TOKEN_REQUESTOR_ID)
  private String tokenRequestorId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUSPENDED_BY = "suspendedBy";
  @SerializedName(SERIALIZED_NAME_SUSPENDED_BY)
  private List<String> suspendedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS_TIMESTAMP = "statusTimestamp";
  @SerializedName(SERIALIZED_NAME_STATUS_TIMESTAMP)
  private String statusTimestamp;

  public static final String SERIALIZED_NAME_PRODUCT_CONFIG = "productConfig";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CONFIG)
  private ProductConfig productConfig;

  public static final String SERIALIZED_NAME_TOKEN_INFO = "tokenInfo";
  @SerializedName(SERIALIZED_NAME_TOKEN_INFO)
  private TokenInfoForNTUAndGetToken tokenInfo;

  public TokenForGetToken() {
  }

  public TokenForGetToken tokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
    return this;
  }

   /**
   * The unique reference allocated to the Token which is always present even if an error occurs. maxLength: 64 
   * @return tokenUniqueReference
  **/
  @javax.annotation.Nullable
  public String getTokenUniqueReference() {
    return tokenUniqueReference;
  }

  public void setTokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
  }


  public TokenForGetToken tokenRequestorId(String tokenRequestorId) {
    this.tokenRequestorId = tokenRequestorId;
    return this;
  }

   /**
   * Identifies the Token Requestor. &lt;br&gt; minLength: 11 maxLength: 11 
   * @return tokenRequestorId
  **/
  @javax.annotation.Nullable
  public String getTokenRequestorId() {
    return tokenRequestorId;
  }

  public void setTokenRequestorId(String tokenRequestorId) {
    this.tokenRequestorId = tokenRequestorId;
  }


  public TokenForGetToken status(String status) {
    this.status = status;
    return this;
  }

   /**
   * The current status of Token. Must be either:  * &#39;INACTIVE&#39; (Token has not yet been activated)  * &#39;ACTIVE&#39; (Token is active and ready to transact)  * &#39;SUSPENDED&#39; (Token is suspended and unable to transact)  * &#39;DEACTIVATED&#39; (Token has been permanently deactivated). maxLength: 32 
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public TokenForGetToken suspendedBy(List<String> suspendedBy) {
    this.suspendedBy = suspendedBy;
    return this;
  }

  public TokenForGetToken addSuspendedByItem(String suspendedByItem) {
    if (this.suspendedBy == null) {
      this.suspendedBy = new ArrayList<>();
    }
    this.suspendedBy.add(suspendedByItem);
    return this;
  }

   /**
   * (CONDITIONAL only supplied if status is SUSPENDED) Who or what caused the Token to be suspended One or more values of:    * ISSUER - Suspended by the Issuer.    * TOKEN_REQUESTOR - Suspended by the Token Requestor    * MOBILE_PIN_LOCKED - Suspended due to the Mobile PIN being locked    * CARDHOLDER - Suspended by the Cardholder 
   * @return suspendedBy
  **/
  @javax.annotation.Nullable
  public List<String> getSuspendedBy() {
    return suspendedBy;
  }

  public void setSuspendedBy(List<String> suspendedBy) {
    this.suspendedBy = suspendedBy;
  }


  public TokenForGetToken statusTimestamp(String statusTimestamp) {
    this.statusTimestamp = statusTimestamp;
    return this;
  }

   /**
   * The date and time the token status was last updated. Expressed in ISO 8601 extended format as one of the following:    * YYYY-MM-DDThh:mm:ss[.sss]Z    * YYYY-MM-DDThh:mm:ss[.sss]Â±hh:mm    * Where [.sss] is optional and can be 1 to 3 digits. 
   * @return statusTimestamp
  **/
  @javax.annotation.Nullable
  public String getStatusTimestamp() {
    return statusTimestamp;
  }

  public void setStatusTimestamp(String statusTimestamp) {
    this.statusTimestamp = statusTimestamp;
  }


  public TokenForGetToken productConfig(ProductConfig productConfig) {
    this.productConfig = productConfig;
    return this;
  }

   /**
   * Get productConfig
   * @return productConfig
  **/
  @javax.annotation.Nullable
  public ProductConfig getProductConfig() {
    return productConfig;
  }

  public void setProductConfig(ProductConfig productConfig) {
    this.productConfig = productConfig;
  }


  public TokenForGetToken tokenInfo(TokenInfoForNTUAndGetToken tokenInfo) {
    this.tokenInfo = tokenInfo;
    return this;
  }

   /**
   * Get tokenInfo
   * @return tokenInfo
  **/
  @javax.annotation.Nullable
  public TokenInfoForNTUAndGetToken getTokenInfo() {
    return tokenInfo;
  }

  public void setTokenInfo(TokenInfoForNTUAndGetToken tokenInfo) {
    this.tokenInfo = tokenInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenForGetToken tokenForGetToken = (TokenForGetToken) o;
    return Objects.equals(this.tokenUniqueReference, tokenForGetToken.tokenUniqueReference) &&
        Objects.equals(this.tokenRequestorId, tokenForGetToken.tokenRequestorId) &&
        Objects.equals(this.status, tokenForGetToken.status) &&
        Objects.equals(this.suspendedBy, tokenForGetToken.suspendedBy) &&
        Objects.equals(this.statusTimestamp, tokenForGetToken.statusTimestamp) &&
        Objects.equals(this.productConfig, tokenForGetToken.productConfig) &&
        Objects.equals(this.tokenInfo, tokenForGetToken.tokenInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenUniqueReference, tokenRequestorId, status, suspendedBy, statusTimestamp, productConfig, tokenInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenForGetToken {\n");
    sb.append("    tokenUniqueReference: ").append(toIndentedString(tokenUniqueReference)).append("\n");
    sb.append("    tokenRequestorId: ").append(toIndentedString(tokenRequestorId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    suspendedBy: ").append(toIndentedString(suspendedBy)).append("\n");
    sb.append("    statusTimestamp: ").append(toIndentedString(statusTimestamp)).append("\n");
    sb.append("    productConfig: ").append(toIndentedString(productConfig)).append("\n");
    sb.append("    tokenInfo: ").append(toIndentedString(tokenInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tokenUniqueReference");
    openapiFields.add("tokenRequestorId");
    openapiFields.add("status");
    openapiFields.add("suspendedBy");
    openapiFields.add("statusTimestamp");
    openapiFields.add("productConfig");
    openapiFields.add("tokenInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TokenForGetToken
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenForGetToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenForGetToken is not found in the empty JSON string", TokenForGetToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokenForGetToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokenForGetToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tokenUniqueReference") != null && !jsonObj.get("tokenUniqueReference").isJsonNull()) && !jsonObj.get("tokenUniqueReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenUniqueReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenUniqueReference").toString()));
      }
      if ((jsonObj.get("tokenRequestorId") != null && !jsonObj.get("tokenRequestorId").isJsonNull()) && !jsonObj.get("tokenRequestorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenRequestorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenRequestorId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suspendedBy") != null && !jsonObj.get("suspendedBy").isJsonNull() && !jsonObj.get("suspendedBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suspendedBy` to be an array in the JSON string but got `%s`", jsonObj.get("suspendedBy").toString()));
      }
      if ((jsonObj.get("statusTimestamp") != null && !jsonObj.get("statusTimestamp").isJsonNull()) && !jsonObj.get("statusTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusTimestamp").toString()));
      }
      // validate the optional field `productConfig`
      if (jsonObj.get("productConfig") != null && !jsonObj.get("productConfig").isJsonNull()) {
        ProductConfig.validateJsonElement(jsonObj.get("productConfig"));
      }
      // validate the optional field `tokenInfo`
      if (jsonObj.get("tokenInfo") != null && !jsonObj.get("tokenInfo").isJsonNull()) {
        TokenInfoForNTUAndGetToken.validateJsonElement(jsonObj.get("tokenInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenForGetToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenForGetToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenForGetToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenForGetToken.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenForGetToken>() {
           @Override
           public void write(JsonWriter out, TokenForGetToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenForGetToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenForGetToken given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenForGetToken
  * @throws IOException if the JSON string is invalid with respect to TokenForGetToken
  */
  public static TokenForGetToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenForGetToken.class);
  }

 /**
  * Convert an instance of TokenForGetToken to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

