/*
 * MDES Digital Enablement API
 * These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mdes_digital_enablement_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mastercard.developer.mdes_digital_enablement_client.model.AuthenticationMethods;
import com.mastercard.developer.mdes_digital_enablement_client.model.ProductConfig;
import com.mastercard.developer.mdes_digital_enablement_client.model.TokenDetail;
import com.mastercard.developer.mdes_digital_enablement_client.model.TokenInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mastercard.developer.mdes_digital_enablement_client.JSON;

/**
 * TokenizeResponseSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-24T13:37:45.612619+01:00[Europe/Dublin]", comments = "Generator version: 7.5.0")
public class TokenizeResponseSchema {
  public static final String SERIALIZED_NAME_RESPONSE_HOST = "responseHost";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HOST)
  private String responseHost;

  public static final String SERIALIZED_NAME_RESPONSE_ID = "responseId";
  @SerializedName(SERIALIZED_NAME_RESPONSE_ID)
  private String responseId;

  public static final String SERIALIZED_NAME_DECISION = "decision";
  @SerializedName(SERIALIZED_NAME_DECISION)
  private String decision;

  public static final String SERIALIZED_NAME_AUTHENTICATION_METHODS = "authenticationMethods";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_METHODS)
  private List<AuthenticationMethods> authenticationMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE = "tokenUniqueReference";
  @SerializedName(SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE)
  private String tokenUniqueReference;

  public static final String SERIALIZED_NAME_PAN_UNIQUE_REFERENCE = "panUniqueReference";
  @SerializedName(SERIALIZED_NAME_PAN_UNIQUE_REFERENCE)
  private String panUniqueReference;

  public static final String SERIALIZED_NAME_PRODUCT_CONFIG = "productConfig";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CONFIG)
  private ProductConfig productConfig;

  public static final String SERIALIZED_NAME_TOKEN_INFO = "tokenInfo";
  @SerializedName(SERIALIZED_NAME_TOKEN_INFO)
  private TokenInfo tokenInfo;

  public static final String SERIALIZED_NAME_TOKEN_DETAIL = "tokenDetail";
  @SerializedName(SERIALIZED_NAME_TOKEN_DETAIL)
  private TokenDetail tokenDetail;

  public static final String SERIALIZED_NAME_SUPPORTS_AUTHENTICATION = "supportsAuthentication";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_AUTHENTICATION)
  private Boolean supportsAuthentication;

  public TokenizeResponseSchema() {
  }

  public TokenizeResponseSchema responseHost(String responseHost) {
    this.responseHost = responseHost;
    return this;
  }

   /**
   * The MasterCard host that originated the request. Future calls in the same conversation may be routed to this host. 
   * @return responseHost
  **/
  @javax.annotation.Nullable
  public String getResponseHost() {
    return responseHost;
  }

  public void setResponseHost(String responseHost) {
    this.responseHost = responseHost;
  }


  public TokenizeResponseSchema responseId(String responseId) {
    this.responseId = responseId;
    return this;
  }

   /**
   * Unique identifier for the response. 
   * @return responseId
  **/
  @javax.annotation.Nullable
  public String getResponseId() {
    return responseId;
  }

  public void setResponseId(String responseId) {
    this.responseId = responseId;
  }


  public TokenizeResponseSchema decision(String decision) {
    this.decision = decision;
    return this;
  }

   /**
   * The tokenization decision for this digitization request. Must be either APPROVED (Digitization request was approved), DECLINED (Digitization request was declined) OR REQUIRE_ADDITIONAL_AUTHENTICATION Digitization request was approved but optionally requires additional authentication. One or more Authentication methods may be provided). 
   * @return decision
  **/
  @javax.annotation.Nullable
  public String getDecision() {
    return decision;
  }

  public void setDecision(String decision) {
    this.decision = decision;
  }


  public TokenizeResponseSchema authenticationMethods(List<AuthenticationMethods> authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
    return this;
  }

  public TokenizeResponseSchema addAuthenticationMethodsItem(AuthenticationMethods authenticationMethodsItem) {
    if (this.authenticationMethods == null) {
      this.authenticationMethods = new ArrayList<>();
    }
    this.authenticationMethods.add(authenticationMethodsItem);
    return this;
  }

   /**
   * Get authenticationMethods
   * @return authenticationMethods
  **/
  @javax.annotation.Nullable
  public List<AuthenticationMethods> getAuthenticationMethods() {
    return authenticationMethods;
  }

  public void setAuthenticationMethods(List<AuthenticationMethods> authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
  }


  public TokenizeResponseSchema tokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
    return this;
  }

   /**
   * The unique reference allocated to the new Token. Serves as a unique identifier for all subsequent queries or management functions relating to this Token. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION. 
   * @return tokenUniqueReference
  **/
  @javax.annotation.Nullable
  public String getTokenUniqueReference() {
    return tokenUniqueReference;
  }

  public void setTokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
  }


  public TokenizeResponseSchema panUniqueReference(String panUniqueReference) {
    this.panUniqueReference = panUniqueReference;
    return this;
  }

   /**
   * The unique reference allocated to the Account Primary Account Number. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION. 
   * @return panUniqueReference
  **/
  @javax.annotation.Nullable
  public String getPanUniqueReference() {
    return panUniqueReference;
  }

  public void setPanUniqueReference(String panUniqueReference) {
    this.panUniqueReference = panUniqueReference;
  }


  public TokenizeResponseSchema productConfig(ProductConfig productConfig) {
    this.productConfig = productConfig;
    return this;
  }

   /**
   * Get productConfig
   * @return productConfig
  **/
  @javax.annotation.Nullable
  public ProductConfig getProductConfig() {
    return productConfig;
  }

  public void setProductConfig(ProductConfig productConfig) {
    this.productConfig = productConfig;
  }


  public TokenizeResponseSchema tokenInfo(TokenInfo tokenInfo) {
    this.tokenInfo = tokenInfo;
    return this;
  }

   /**
   * Get tokenInfo
   * @return tokenInfo
  **/
  @javax.annotation.Nullable
  public TokenInfo getTokenInfo() {
    return tokenInfo;
  }

  public void setTokenInfo(TokenInfo tokenInfo) {
    this.tokenInfo = tokenInfo;
  }


  public TokenizeResponseSchema tokenDetail(TokenDetail tokenDetail) {
    this.tokenDetail = tokenDetail;
    return this;
  }

   /**
   * Get tokenDetail
   * @return tokenDetail
  **/
  @javax.annotation.Nullable
  public TokenDetail getTokenDetail() {
    return tokenDetail;
  }

  public void setTokenDetail(TokenDetail tokenDetail) {
    this.tokenDetail = tokenDetail;
  }


  public TokenizeResponseSchema supportsAuthentication(Boolean supportsAuthentication) {
    this.supportsAuthentication = supportsAuthentication;
    return this;
  }

   /**
   * (required)Flag to indicate if the issuer supports authentication of the cardholder on the token. Must be one of:   - TRUE   - FALSE 
   * @return supportsAuthentication
  **/
  @javax.annotation.Nullable
  public Boolean getSupportsAuthentication() {
    return supportsAuthentication;
  }

  public void setSupportsAuthentication(Boolean supportsAuthentication) {
    this.supportsAuthentication = supportsAuthentication;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenizeResponseSchema tokenizeResponseSchema = (TokenizeResponseSchema) o;
    return Objects.equals(this.responseHost, tokenizeResponseSchema.responseHost) &&
        Objects.equals(this.responseId, tokenizeResponseSchema.responseId) &&
        Objects.equals(this.decision, tokenizeResponseSchema.decision) &&
        Objects.equals(this.authenticationMethods, tokenizeResponseSchema.authenticationMethods) &&
        Objects.equals(this.tokenUniqueReference, tokenizeResponseSchema.tokenUniqueReference) &&
        Objects.equals(this.panUniqueReference, tokenizeResponseSchema.panUniqueReference) &&
        Objects.equals(this.productConfig, tokenizeResponseSchema.productConfig) &&
        Objects.equals(this.tokenInfo, tokenizeResponseSchema.tokenInfo) &&
        Objects.equals(this.tokenDetail, tokenizeResponseSchema.tokenDetail) &&
        Objects.equals(this.supportsAuthentication, tokenizeResponseSchema.supportsAuthentication);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseHost, responseId, decision, authenticationMethods, tokenUniqueReference, panUniqueReference, productConfig, tokenInfo, tokenDetail, supportsAuthentication);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenizeResponseSchema {\n");
    sb.append("    responseHost: ").append(toIndentedString(responseHost)).append("\n");
    sb.append("    responseId: ").append(toIndentedString(responseId)).append("\n");
    sb.append("    decision: ").append(toIndentedString(decision)).append("\n");
    sb.append("    authenticationMethods: ").append(toIndentedString(authenticationMethods)).append("\n");
    sb.append("    tokenUniqueReference: ").append(toIndentedString(tokenUniqueReference)).append("\n");
    sb.append("    panUniqueReference: ").append(toIndentedString(panUniqueReference)).append("\n");
    sb.append("    productConfig: ").append(toIndentedString(productConfig)).append("\n");
    sb.append("    tokenInfo: ").append(toIndentedString(tokenInfo)).append("\n");
    sb.append("    tokenDetail: ").append(toIndentedString(tokenDetail)).append("\n");
    sb.append("    supportsAuthentication: ").append(toIndentedString(supportsAuthentication)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("responseHost");
    openapiFields.add("responseId");
    openapiFields.add("decision");
    openapiFields.add("authenticationMethods");
    openapiFields.add("tokenUniqueReference");
    openapiFields.add("panUniqueReference");
    openapiFields.add("productConfig");
    openapiFields.add("tokenInfo");
    openapiFields.add("tokenDetail");
    openapiFields.add("supportsAuthentication");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TokenizeResponseSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenizeResponseSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenizeResponseSchema is not found in the empty JSON string", TokenizeResponseSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokenizeResponseSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokenizeResponseSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("responseHost") != null && !jsonObj.get("responseHost").isJsonNull()) && !jsonObj.get("responseHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseHost").toString()));
      }
      if ((jsonObj.get("responseId") != null && !jsonObj.get("responseId").isJsonNull()) && !jsonObj.get("responseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseId").toString()));
      }
      if ((jsonObj.get("decision") != null && !jsonObj.get("decision").isJsonNull()) && !jsonObj.get("decision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decision").toString()));
      }
      if (jsonObj.get("authenticationMethods") != null && !jsonObj.get("authenticationMethods").isJsonNull()) {
        JsonArray jsonArrayauthenticationMethods = jsonObj.getAsJsonArray("authenticationMethods");
        if (jsonArrayauthenticationMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authenticationMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authenticationMethods` to be an array in the JSON string but got `%s`", jsonObj.get("authenticationMethods").toString()));
          }

          // validate the optional field `authenticationMethods` (array)
          for (int i = 0; i < jsonArrayauthenticationMethods.size(); i++) {
            AuthenticationMethods.validateJsonElement(jsonArrayauthenticationMethods.get(i));
          };
        }
      }
      if ((jsonObj.get("tokenUniqueReference") != null && !jsonObj.get("tokenUniqueReference").isJsonNull()) && !jsonObj.get("tokenUniqueReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenUniqueReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenUniqueReference").toString()));
      }
      if ((jsonObj.get("panUniqueReference") != null && !jsonObj.get("panUniqueReference").isJsonNull()) && !jsonObj.get("panUniqueReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panUniqueReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panUniqueReference").toString()));
      }
      // validate the optional field `productConfig`
      if (jsonObj.get("productConfig") != null && !jsonObj.get("productConfig").isJsonNull()) {
        ProductConfig.validateJsonElement(jsonObj.get("productConfig"));
      }
      // validate the optional field `tokenInfo`
      if (jsonObj.get("tokenInfo") != null && !jsonObj.get("tokenInfo").isJsonNull()) {
        TokenInfo.validateJsonElement(jsonObj.get("tokenInfo"));
      }
      // validate the optional field `tokenDetail`
      if (jsonObj.get("tokenDetail") != null && !jsonObj.get("tokenDetail").isJsonNull()) {
        TokenDetail.validateJsonElement(jsonObj.get("tokenDetail"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenizeResponseSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenizeResponseSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenizeResponseSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenizeResponseSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenizeResponseSchema>() {
           @Override
           public void write(JsonWriter out, TokenizeResponseSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenizeResponseSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenizeResponseSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenizeResponseSchema
  * @throws IOException if the JSON string is invalid with respect to TokenizeResponseSchema
  */
  public static TokenizeResponseSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenizeResponseSchema.class);
  }

 /**
  * Convert an instance of TokenizeResponseSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

