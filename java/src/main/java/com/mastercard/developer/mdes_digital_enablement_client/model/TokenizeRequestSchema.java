/*
 * MDES Digital Enablement API
 * These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mdes_digital_enablement_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mastercard.developer.mdes_digital_enablement_client.model.DecisioningData;
import com.mastercard.developer.mdes_digital_enablement_client.model.FundingAccountInfo;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mastercard.developer.mdes_digital_enablement_client.JSON;

/**
 * TokenizeRequestSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-24T13:37:45.612619+01:00[Europe/Dublin]", comments = "Generator version: 7.5.0")
public class TokenizeRequestSchema {
  public static final String SERIALIZED_NAME_RESPONSE_HOST = "responseHost";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HOST)
  private String responseHost;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_TOKEN_TYPE = "tokenType";
  @SerializedName(SERIALIZED_NAME_TOKEN_TYPE)
  private String tokenType;

  public static final String SERIALIZED_NAME_TOKEN_REQUESTOR_ID = "tokenRequestorId";
  @SerializedName(SERIALIZED_NAME_TOKEN_REQUESTOR_ID)
  private String tokenRequestorId;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_FUNDING_ACCOUNT_INFO = "fundingAccountInfo";
  @SerializedName(SERIALIZED_NAME_FUNDING_ACCOUNT_INFO)
  private FundingAccountInfo fundingAccountInfo;

  public static final String SERIALIZED_NAME_CONSUMER_LANGUAGE = "consumerLanguage";
  @SerializedName(SERIALIZED_NAME_CONSUMER_LANGUAGE)
  private String consumerLanguage;

  public static final String SERIALIZED_NAME_TOKENIZATION_AUTHENTICATION_VALUE = "tokenizationAuthenticationValue";
  @SerializedName(SERIALIZED_NAME_TOKENIZATION_AUTHENTICATION_VALUE)
  private String tokenizationAuthenticationValue;

  public static final String SERIALIZED_NAME_DECISIONING_DATA = "decisioningData";
  @SerializedName(SERIALIZED_NAME_DECISIONING_DATA)
  private DecisioningData decisioningData;

  public TokenizeRequestSchema() {
  }

  public TokenizeRequestSchema responseHost(String responseHost) {
    this.responseHost = responseHost;
    return this;
  }

   /**
   * \&quot;The host that originated the request. Future calls in the same conversation may be routed to this host. Must be provided as: host[:port][/contextRoot] Where port and contextRoot are optional. If contextRoot is not provided, the default (per the URL Scheme) is assumed and must be used.\&quot; 
   * @return responseHost
  **/
  @javax.annotation.Nullable
  public String getResponseHost() {
    return responseHost;
  }

  public void setResponseHost(String responseHost) {
    this.responseHost = responseHost;
  }


  public TokenizeRequestSchema requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Unique identifier for the request. 
   * @return requestId
  **/
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public TokenizeRequestSchema tokenType(String tokenType) {
    this.tokenType = tokenType;
    return this;
  }

   /**
   * The type of Token requested. Must be CLOUD 
   * @return tokenType
  **/
  @javax.annotation.Nonnull
  public String getTokenType() {
    return tokenType;
  }

  public void setTokenType(String tokenType) {
    this.tokenType = tokenType;
  }


  public TokenizeRequestSchema tokenRequestorId(String tokenRequestorId) {
    this.tokenRequestorId = tokenRequestorId;
    return this;
  }

   /**
   * 11-digit numeric ID provided by Mastercard that identifies the Token Requestor. 
   * @return tokenRequestorId
  **/
  @javax.annotation.Nonnull
  public String getTokenRequestorId() {
    return tokenRequestorId;
  }

  public void setTokenRequestorId(String tokenRequestorId) {
    this.tokenRequestorId = tokenRequestorId;
  }


  public TokenizeRequestSchema taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

   /**
   * Identifier for this task as assigned by the Token Requestor, unique across a given Token Requestor Identifier. May be used in the Get Task Status API to query the status of this task. 
   * @return taskId
  **/
  @javax.annotation.Nonnull
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public TokenizeRequestSchema fundingAccountInfo(FundingAccountInfo fundingAccountInfo) {
    this.fundingAccountInfo = fundingAccountInfo;
    return this;
  }

   /**
   * Get fundingAccountInfo
   * @return fundingAccountInfo
  **/
  @javax.annotation.Nonnull
  public FundingAccountInfo getFundingAccountInfo() {
    return fundingAccountInfo;
  }

  public void setFundingAccountInfo(FundingAccountInfo fundingAccountInfo) {
    this.fundingAccountInfo = fundingAccountInfo;
  }


  public TokenizeRequestSchema consumerLanguage(String consumerLanguage) {
    this.consumerLanguage = consumerLanguage;
    return this;
  }

   /**
   * Language preference selected by the consumer. Formatted as an ISO- 639-1 two-letter language code. 
   * @return consumerLanguage
  **/
  @javax.annotation.Nullable
  public String getConsumerLanguage() {
    return consumerLanguage;
  }

  public void setConsumerLanguage(String consumerLanguage) {
    this.consumerLanguage = consumerLanguage;
  }


  public TokenizeRequestSchema tokenizationAuthenticationValue(String tokenizationAuthenticationValue) {
    this.tokenizationAuthenticationValue = tokenizationAuthenticationValue;
    return this;
  }

   /**
   * The Tokenization Authentication Value (TAV) as cryptographically signed by the Issuer to authorize this digitization request. 
   * @return tokenizationAuthenticationValue
  **/
  @javax.annotation.Nullable
  public String getTokenizationAuthenticationValue() {
    return tokenizationAuthenticationValue;
  }

  public void setTokenizationAuthenticationValue(String tokenizationAuthenticationValue) {
    this.tokenizationAuthenticationValue = tokenizationAuthenticationValue;
  }


  public TokenizeRequestSchema decisioningData(DecisioningData decisioningData) {
    this.decisioningData = decisioningData;
    return this;
  }

   /**
   * Get decisioningData
   * @return decisioningData
  **/
  @javax.annotation.Nullable
  public DecisioningData getDecisioningData() {
    return decisioningData;
  }

  public void setDecisioningData(DecisioningData decisioningData) {
    this.decisioningData = decisioningData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenizeRequestSchema tokenizeRequestSchema = (TokenizeRequestSchema) o;
    return Objects.equals(this.responseHost, tokenizeRequestSchema.responseHost) &&
        Objects.equals(this.requestId, tokenizeRequestSchema.requestId) &&
        Objects.equals(this.tokenType, tokenizeRequestSchema.tokenType) &&
        Objects.equals(this.tokenRequestorId, tokenizeRequestSchema.tokenRequestorId) &&
        Objects.equals(this.taskId, tokenizeRequestSchema.taskId) &&
        Objects.equals(this.fundingAccountInfo, tokenizeRequestSchema.fundingAccountInfo) &&
        Objects.equals(this.consumerLanguage, tokenizeRequestSchema.consumerLanguage) &&
        Objects.equals(this.tokenizationAuthenticationValue, tokenizeRequestSchema.tokenizationAuthenticationValue) &&
        Objects.equals(this.decisioningData, tokenizeRequestSchema.decisioningData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseHost, requestId, tokenType, tokenRequestorId, taskId, fundingAccountInfo, consumerLanguage, tokenizationAuthenticationValue, decisioningData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenizeRequestSchema {\n");
    sb.append("    responseHost: ").append(toIndentedString(responseHost)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
    sb.append("    tokenRequestorId: ").append(toIndentedString(tokenRequestorId)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    fundingAccountInfo: ").append(toIndentedString(fundingAccountInfo)).append("\n");
    sb.append("    consumerLanguage: ").append(toIndentedString(consumerLanguage)).append("\n");
    sb.append("    tokenizationAuthenticationValue: ").append(toIndentedString(tokenizationAuthenticationValue)).append("\n");
    sb.append("    decisioningData: ").append(toIndentedString(decisioningData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("responseHost");
    openapiFields.add("requestId");
    openapiFields.add("tokenType");
    openapiFields.add("tokenRequestorId");
    openapiFields.add("taskId");
    openapiFields.add("fundingAccountInfo");
    openapiFields.add("consumerLanguage");
    openapiFields.add("tokenizationAuthenticationValue");
    openapiFields.add("decisioningData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tokenType");
    openapiRequiredFields.add("tokenRequestorId");
    openapiRequiredFields.add("taskId");
    openapiRequiredFields.add("fundingAccountInfo");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TokenizeRequestSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenizeRequestSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenizeRequestSchema is not found in the empty JSON string", TokenizeRequestSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokenizeRequestSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokenizeRequestSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TokenizeRequestSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("responseHost") != null && !jsonObj.get("responseHost").isJsonNull()) && !jsonObj.get("responseHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseHost").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if (!jsonObj.get("tokenType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenType").toString()));
      }
      if (!jsonObj.get("tokenRequestorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenRequestorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenRequestorId").toString()));
      }
      if (!jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
      // validate the required field `fundingAccountInfo`
      FundingAccountInfo.validateJsonElement(jsonObj.get("fundingAccountInfo"));
      if ((jsonObj.get("consumerLanguage") != null && !jsonObj.get("consumerLanguage").isJsonNull()) && !jsonObj.get("consumerLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerLanguage").toString()));
      }
      if ((jsonObj.get("tokenizationAuthenticationValue") != null && !jsonObj.get("tokenizationAuthenticationValue").isJsonNull()) && !jsonObj.get("tokenizationAuthenticationValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenizationAuthenticationValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenizationAuthenticationValue").toString()));
      }
      // validate the optional field `decisioningData`
      if (jsonObj.get("decisioningData") != null && !jsonObj.get("decisioningData").isJsonNull()) {
        DecisioningData.validateJsonElement(jsonObj.get("decisioningData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenizeRequestSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenizeRequestSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenizeRequestSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenizeRequestSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenizeRequestSchema>() {
           @Override
           public void write(JsonWriter out, TokenizeRequestSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenizeRequestSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenizeRequestSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenizeRequestSchema
  * @throws IOException if the JSON string is invalid with respect to TokenizeRequestSchema
  */
  public static TokenizeRequestSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenizeRequestSchema.class);
  }

 /**
  * Convert an instance of TokenizeRequestSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

