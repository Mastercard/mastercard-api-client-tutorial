/*
 * MDES Digital Enablement API
 * These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mdes_digital_enablement_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mastercard.developer.mdes_digital_enablement_client.model.BillingAddress;
import com.mastercard.developer.mdes_digital_enablement_client.model.PhoneNumber;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mastercard.developer.mdes_digital_enablement_client.JSON;

/**
 * **(CONDITIONAL)** Present in tokenize response if supported by the Merchant, if using a pushAccountReceipt and if there is account holder data associated with the pushAccountReceipt in case that the issuer decision is APPROVED. Refer to MDES Token Connect Token Requestor Implementation Guide and Specification  for more details. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-24T13:37:45.612619+01:00[Europe/Dublin]", comments = "Generator version: 7.5.0")
public class AccountHolderDataOutbound {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_NAME = "accountHolderName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_NAME)
  private String accountHolderName;

  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_ADDRESS = "accountHolderAddress";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_ADDRESS)
  private BillingAddress accountHolderAddress;

  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_EMAIL_ADDRESS = "accountHolderEmailAddress";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_EMAIL_ADDRESS)
  private String accountHolderEmailAddress;

  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_MOBILE_PHONE_NUMBER = "accountHolderMobilePhoneNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_MOBILE_PHONE_NUMBER)
  private PhoneNumber accountHolderMobilePhoneNumber;

  public AccountHolderDataOutbound() {
  }

  public AccountHolderDataOutbound accountHolderName(String accountHolderName) {
    this.accountHolderName = accountHolderName;
    return this;
  }

   /**
   * **(OPTIONAL)** The name of the cardholder 
   * @return accountHolderName
  **/
  @javax.annotation.Nullable
  public String getAccountHolderName() {
    return accountHolderName;
  }

  public void setAccountHolderName(String accountHolderName) {
    this.accountHolderName = accountHolderName;
  }


  public AccountHolderDataOutbound accountHolderAddress(BillingAddress accountHolderAddress) {
    this.accountHolderAddress = accountHolderAddress;
    return this;
  }

   /**
   * Get accountHolderAddress
   * @return accountHolderAddress
  **/
  @javax.annotation.Nullable
  public BillingAddress getAccountHolderAddress() {
    return accountHolderAddress;
  }

  public void setAccountHolderAddress(BillingAddress accountHolderAddress) {
    this.accountHolderAddress = accountHolderAddress;
  }


  public AccountHolderDataOutbound accountHolderEmailAddress(String accountHolderEmailAddress) {
    this.accountHolderEmailAddress = accountHolderEmailAddress;
    return this;
  }

   /**
   * **(OPTIONAL)** The e-mail address of the Account Holder 
   * @return accountHolderEmailAddress
  **/
  @javax.annotation.Nullable
  public String getAccountHolderEmailAddress() {
    return accountHolderEmailAddress;
  }

  public void setAccountHolderEmailAddress(String accountHolderEmailAddress) {
    this.accountHolderEmailAddress = accountHolderEmailAddress;
  }


  public AccountHolderDataOutbound accountHolderMobilePhoneNumber(PhoneNumber accountHolderMobilePhoneNumber) {
    this.accountHolderMobilePhoneNumber = accountHolderMobilePhoneNumber;
    return this;
  }

   /**
   * Get accountHolderMobilePhoneNumber
   * @return accountHolderMobilePhoneNumber
  **/
  @javax.annotation.Nullable
  public PhoneNumber getAccountHolderMobilePhoneNumber() {
    return accountHolderMobilePhoneNumber;
  }

  public void setAccountHolderMobilePhoneNumber(PhoneNumber accountHolderMobilePhoneNumber) {
    this.accountHolderMobilePhoneNumber = accountHolderMobilePhoneNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountHolderDataOutbound accountHolderDataOutbound = (AccountHolderDataOutbound) o;
    return Objects.equals(this.accountHolderName, accountHolderDataOutbound.accountHolderName) &&
        Objects.equals(this.accountHolderAddress, accountHolderDataOutbound.accountHolderAddress) &&
        Objects.equals(this.accountHolderEmailAddress, accountHolderDataOutbound.accountHolderEmailAddress) &&
        Objects.equals(this.accountHolderMobilePhoneNumber, accountHolderDataOutbound.accountHolderMobilePhoneNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolderName, accountHolderAddress, accountHolderEmailAddress, accountHolderMobilePhoneNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountHolderDataOutbound {\n");
    sb.append("    accountHolderName: ").append(toIndentedString(accountHolderName)).append("\n");
    sb.append("    accountHolderAddress: ").append(toIndentedString(accountHolderAddress)).append("\n");
    sb.append("    accountHolderEmailAddress: ").append(toIndentedString(accountHolderEmailAddress)).append("\n");
    sb.append("    accountHolderMobilePhoneNumber: ").append(toIndentedString(accountHolderMobilePhoneNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolderName");
    openapiFields.add("accountHolderAddress");
    openapiFields.add("accountHolderEmailAddress");
    openapiFields.add("accountHolderMobilePhoneNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccountHolderDataOutbound
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountHolderDataOutbound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountHolderDataOutbound is not found in the empty JSON string", AccountHolderDataOutbound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountHolderDataOutbound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountHolderDataOutbound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountHolderName") != null && !jsonObj.get("accountHolderName").isJsonNull()) && !jsonObj.get("accountHolderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderName").toString()));
      }
      // validate the optional field `accountHolderAddress`
      if (jsonObj.get("accountHolderAddress") != null && !jsonObj.get("accountHolderAddress").isJsonNull()) {
        BillingAddress.validateJsonElement(jsonObj.get("accountHolderAddress"));
      }
      if ((jsonObj.get("accountHolderEmailAddress") != null && !jsonObj.get("accountHolderEmailAddress").isJsonNull()) && !jsonObj.get("accountHolderEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderEmailAddress").toString()));
      }
      // validate the optional field `accountHolderMobilePhoneNumber`
      if (jsonObj.get("accountHolderMobilePhoneNumber") != null && !jsonObj.get("accountHolderMobilePhoneNumber").isJsonNull()) {
        PhoneNumber.validateJsonElement(jsonObj.get("accountHolderMobilePhoneNumber"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountHolderDataOutbound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountHolderDataOutbound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountHolderDataOutbound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountHolderDataOutbound.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountHolderDataOutbound>() {
           @Override
           public void write(JsonWriter out, AccountHolderDataOutbound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountHolderDataOutbound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountHolderDataOutbound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountHolderDataOutbound
  * @throws IOException if the JSON string is invalid with respect to AccountHolderDataOutbound
  */
  public static AccountHolderDataOutbound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountHolderDataOutbound.class);
  }

 /**
  * Convert an instance of AccountHolderDataOutbound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

