/*
 * MDES Digital Enablement API
 * These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mdes_digital_enablement_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mastercard.developer.mdes_digital_enablement_client.JSON;

/**
 * TokenInfoForNTUAndGetToken
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-24T13:37:45.612619+01:00[Europe/Dublin]", comments = "Generator version: 7.5.0")
public class TokenInfoForNTUAndGetToken {
  public static final String SERIALIZED_NAME_TOKEN_PAN_SUFFIX = "tokenPanSuffix";
  @SerializedName(SERIALIZED_NAME_TOKEN_PAN_SUFFIX)
  private String tokenPanSuffix;

  public static final String SERIALIZED_NAME_ACCOUNT_PAN_PREFIX = "accountPanPrefix";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PAN_PREFIX)
  private String accountPanPrefix;

  public static final String SERIALIZED_NAME_ACCOUNT_PAN_SUFFIX = "accountPanSuffix";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PAN_SUFFIX)
  private String accountPanSuffix;

  public static final String SERIALIZED_NAME_TOKEN_EXPIRY = "tokenExpiry";
  @SerializedName(SERIALIZED_NAME_TOKEN_EXPIRY)
  private String tokenExpiry;

  public static final String SERIALIZED_NAME_ACCOUNT_PAN_EXPIRY = "accountPanExpiry";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PAN_EXPIRY)
  private String accountPanExpiry;

  public static final String SERIALIZED_NAME_DSRP_CAPABLE = "dsrpCapable";
  @SerializedName(SERIALIZED_NAME_DSRP_CAPABLE)
  private String dsrpCapable;

  public static final String SERIALIZED_NAME_TOKEN_ASSURANCE_LEVEL = "tokenAssuranceLevel";
  @SerializedName(SERIALIZED_NAME_TOKEN_ASSURANCE_LEVEL)
  private Integer tokenAssuranceLevel;

  public static final String SERIALIZED_NAME_PRODUCT_CATEGORY = "productCategory";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CATEGORY)
  private String productCategory;

  public TokenInfoForNTUAndGetToken() {
  }

  public TokenInfoForNTUAndGetToken tokenPanSuffix(String tokenPanSuffix) {
    this.tokenPanSuffix = tokenPanSuffix;
    return this;
  }

   /**
   * The last few digits (typically four) of the Token PAN. 
   * @return tokenPanSuffix
  **/
  @javax.annotation.Nonnull
  public String getTokenPanSuffix() {
    return tokenPanSuffix;
  }

  public void setTokenPanSuffix(String tokenPanSuffix) {
    this.tokenPanSuffix = tokenPanSuffix;
  }


  public TokenInfoForNTUAndGetToken accountPanPrefix(String accountPanPrefix) {
    this.accountPanPrefix = accountPanPrefix;
    return this;
  }

   /**
   * The first few digits (typically six) of the Account PAN. 
   * @return accountPanPrefix
  **/
  @javax.annotation.Nonnull
  public String getAccountPanPrefix() {
    return accountPanPrefix;
  }

  public void setAccountPanPrefix(String accountPanPrefix) {
    this.accountPanPrefix = accountPanPrefix;
  }


  public TokenInfoForNTUAndGetToken accountPanSuffix(String accountPanSuffix) {
    this.accountPanSuffix = accountPanSuffix;
    return this;
  }

   /**
   * The last few digits (typically four) of the Account PAN. 
   * @return accountPanSuffix
  **/
  @javax.annotation.Nonnull
  public String getAccountPanSuffix() {
    return accountPanSuffix;
  }

  public void setAccountPanSuffix(String accountPanSuffix) {
    this.accountPanSuffix = accountPanSuffix;
  }


  public TokenInfoForNTUAndGetToken tokenExpiry(String tokenExpiry) {
    this.tokenExpiry = tokenExpiry;
    return this;
  }

   /**
   * The expiry of the Token PAN, given in MMYY format. 
   * @return tokenExpiry
  **/
  @javax.annotation.Nonnull
  public String getTokenExpiry() {
    return tokenExpiry;
  }

  public void setTokenExpiry(String tokenExpiry) {
    this.tokenExpiry = tokenExpiry;
  }


  public TokenInfoForNTUAndGetToken accountPanExpiry(String accountPanExpiry) {
    this.accountPanExpiry = accountPanExpiry;
    return this;
  }

   /**
   * The expiry of the Account PAN, given in MMYY format. 
   * @return accountPanExpiry
  **/
  @javax.annotation.Nullable
  public String getAccountPanExpiry() {
    return accountPanExpiry;
  }

  public void setAccountPanExpiry(String accountPanExpiry) {
    this.accountPanExpiry = accountPanExpiry;
  }


  public TokenInfoForNTUAndGetToken dsrpCapable(String dsrpCapable) {
    this.dsrpCapable = dsrpCapable;
    return this;
  }

   /**
   * Whether DSRP transactions are supported by this Token. Must be either &#39;true&#39; (DSRP capable) or &#39;false&#39; (Not DSRP capable). 
   * @return dsrpCapable
  **/
  @javax.annotation.Nonnull
  public String getDsrpCapable() {
    return dsrpCapable;
  }

  public void setDsrpCapable(String dsrpCapable) {
    this.dsrpCapable = dsrpCapable;
  }


  public TokenInfoForNTUAndGetToken tokenAssuranceLevel(Integer tokenAssuranceLevel) {
    this.tokenAssuranceLevel = tokenAssuranceLevel;
    return this;
  }

   /**
   * A value indicating the confidence level of the token to Account PAN binding. 
   * @return tokenAssuranceLevel
  **/
  @javax.annotation.Nullable
  public Integer getTokenAssuranceLevel() {
    return tokenAssuranceLevel;
  }

  public void setTokenAssuranceLevel(Integer tokenAssuranceLevel) {
    this.tokenAssuranceLevel = tokenAssuranceLevel;
  }


  public TokenInfoForNTUAndGetToken productCategory(String productCategory) {
    this.productCategory = productCategory;
    return this;
  }

   /**
   * The product category of the Account PAN. When supplied will be one of the following values:    * CREDIT   * DEBIT   * PREPAID   * UNKNOWN 
   * @return productCategory
  **/
  @javax.annotation.Nullable
  public String getProductCategory() {
    return productCategory;
  }

  public void setProductCategory(String productCategory) {
    this.productCategory = productCategory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenInfoForNTUAndGetToken tokenInfoForNTUAndGetToken = (TokenInfoForNTUAndGetToken) o;
    return Objects.equals(this.tokenPanSuffix, tokenInfoForNTUAndGetToken.tokenPanSuffix) &&
        Objects.equals(this.accountPanPrefix, tokenInfoForNTUAndGetToken.accountPanPrefix) &&
        Objects.equals(this.accountPanSuffix, tokenInfoForNTUAndGetToken.accountPanSuffix) &&
        Objects.equals(this.tokenExpiry, tokenInfoForNTUAndGetToken.tokenExpiry) &&
        Objects.equals(this.accountPanExpiry, tokenInfoForNTUAndGetToken.accountPanExpiry) &&
        Objects.equals(this.dsrpCapable, tokenInfoForNTUAndGetToken.dsrpCapable) &&
        Objects.equals(this.tokenAssuranceLevel, tokenInfoForNTUAndGetToken.tokenAssuranceLevel) &&
        Objects.equals(this.productCategory, tokenInfoForNTUAndGetToken.productCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenPanSuffix, accountPanPrefix, accountPanSuffix, tokenExpiry, accountPanExpiry, dsrpCapable, tokenAssuranceLevel, productCategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenInfoForNTUAndGetToken {\n");
    sb.append("    tokenPanSuffix: ").append(toIndentedString(tokenPanSuffix)).append("\n");
    sb.append("    accountPanPrefix: ").append(toIndentedString(accountPanPrefix)).append("\n");
    sb.append("    accountPanSuffix: ").append(toIndentedString(accountPanSuffix)).append("\n");
    sb.append("    tokenExpiry: ").append(toIndentedString(tokenExpiry)).append("\n");
    sb.append("    accountPanExpiry: ").append(toIndentedString(accountPanExpiry)).append("\n");
    sb.append("    dsrpCapable: ").append(toIndentedString(dsrpCapable)).append("\n");
    sb.append("    tokenAssuranceLevel: ").append(toIndentedString(tokenAssuranceLevel)).append("\n");
    sb.append("    productCategory: ").append(toIndentedString(productCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tokenPanSuffix");
    openapiFields.add("accountPanPrefix");
    openapiFields.add("accountPanSuffix");
    openapiFields.add("tokenExpiry");
    openapiFields.add("accountPanExpiry");
    openapiFields.add("dsrpCapable");
    openapiFields.add("tokenAssuranceLevel");
    openapiFields.add("productCategory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tokenPanSuffix");
    openapiRequiredFields.add("accountPanPrefix");
    openapiRequiredFields.add("accountPanSuffix");
    openapiRequiredFields.add("tokenExpiry");
    openapiRequiredFields.add("dsrpCapable");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TokenInfoForNTUAndGetToken
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenInfoForNTUAndGetToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenInfoForNTUAndGetToken is not found in the empty JSON string", TokenInfoForNTUAndGetToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokenInfoForNTUAndGetToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokenInfoForNTUAndGetToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TokenInfoForNTUAndGetToken.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("tokenPanSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenPanSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenPanSuffix").toString()));
      }
      if (!jsonObj.get("accountPanPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountPanPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountPanPrefix").toString()));
      }
      if (!jsonObj.get("accountPanSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountPanSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountPanSuffix").toString()));
      }
      if (!jsonObj.get("tokenExpiry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenExpiry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenExpiry").toString()));
      }
      if ((jsonObj.get("accountPanExpiry") != null && !jsonObj.get("accountPanExpiry").isJsonNull()) && !jsonObj.get("accountPanExpiry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountPanExpiry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountPanExpiry").toString()));
      }
      if (!jsonObj.get("dsrpCapable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsrpCapable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsrpCapable").toString()));
      }
      if ((jsonObj.get("productCategory") != null && !jsonObj.get("productCategory").isJsonNull()) && !jsonObj.get("productCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productCategory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenInfoForNTUAndGetToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenInfoForNTUAndGetToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenInfoForNTUAndGetToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenInfoForNTUAndGetToken.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenInfoForNTUAndGetToken>() {
           @Override
           public void write(JsonWriter out, TokenInfoForNTUAndGetToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenInfoForNTUAndGetToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenInfoForNTUAndGetToken given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenInfoForNTUAndGetToken
  * @throws IOException if the JSON string is invalid with respect to TokenInfoForNTUAndGetToken
  */
  public static TokenInfoForNTUAndGetToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenInfoForNTUAndGetToken.class);
  }

 /**
  * Convert an instance of TokenInfoForNTUAndGetToken to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

